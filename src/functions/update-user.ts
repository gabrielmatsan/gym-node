import { eq } from 'drizzle-orm'
import { db } from '../db'
import { users } from '../db/schema'
import { UserNotFoundError } from '../errors/errors'

interface UpdateUserRequest {
  id: number
  name?: string 
  email?: string
  password?: string
}

export async function updateUser({
  id,
  name,
  email,
  password,
}: UpdateUserRequest) {

  const existingUser = await db.select().from(users).where(eq(users.id, id))

  if (existingUser.length === 0) {
    throw new UserNotFoundError()
  }

  // ‚úÖ 2Ô∏è‚É£ Garante que s√≥ espalhamos objetos v√°lidos
  const updateData: Partial<{ name: string; email: string; password: string }> =
    {}

  if (name != null) updateData.name = name
  if (email != null) updateData.email = email
  if (password != null) updateData.password = password

  if (Object.keys(updateData).length === 0) {
    throw new Error('Pelo menos um campo deve ser enviado para atualiza√ß√£o')
  }

  // ‚úÖ 3Ô∏è‚É£ Atualiza apenas os campos enviados
  await db.update(users).set(updateData).where(eq(users.id, id))

  // üîÑ 4Ô∏è‚É£ Retorna os novos dados do usu√°rio atualizado
  const updatedUser = await db.select().from(users).where(eq(users.id, id))

  return {
    id: updatedUser[0].id,
    fullName: updatedUser[0].name, // ‚úÖ Convertendo `name` para `fullName`
    email: updatedUser[0].email,
    created_at: updatedUser[0].created_at.toISOString(), // ‚úÖ Convertendo `Date` para `string`
  }
}
